name: Auto Sync Fork and Releases

on:
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 2:00（北京时间 10:00）
  workflow_dispatch:     # 支持手动触发

jobs:
  sync-fork-and-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 步骤 1：检出你的 Fork 仓库
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2：设置 Git 身份
      - name: Set up Git Identity
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # 步骤 3：添加上游仓库
      - name: Add Upstream Remote
        run: |
          git remote add upstream https://github.com/MoonTechLab/Selene.git
          git fetch upstream --tags

      # 步骤 4：同步默认分支（main/master）
      - name: Sync Default Branch
        run: |
          # 自动检测默认分支
          if git show-ref --verify --quiet refs/remotes/origin/main; then
            DEFAULT_BRANCH="main"
          elif git show-ref --verify --quiet refs/remotes/origin/master; then
            DEFAULT_BRANCH="master"
          else
            echo "无法确定默认分支"
            exit 1
          fi
          
          echo "同步默认分支: $DEFAULT_BRANCH"
          git checkout $DEFAULT_BRANCH
          git merge --no-edit upstream/$DEFAULT_BRANCH
          git push origin $DEFAULT_BRANCH

      # 步骤 5：同步安全的 Tags（跳过包含 workflow 文件的 Tags）
      - name: Sync Safe Tags
        run: |
          # 获取上游所有 Tags
          UPSTREAM_TAGS=$(git ls-remote --tags upstream | awk -F/ '{print $3}' | sort)
          LOCAL_TAGS=$(git tag -l | sort)
          
          # 找出新增 Tags
          NEW_TAGS=$(comm -13 <(echo "$LOCAL_TAGS") <(echo "$UPSTREAM_TAGS"))
          
          if [ -z "$NEW_TAGS" ]; then
            echo "没有发现新的 Tags 需要同步"
          else
            echo "发现新的 Tags:"
            echo "$NEW_TAGS"
            
            # 逐个检查并同步安全的 Tags
            for TAG in $NEW_TAGS; do
              echo "检查 Tag: $TAG"
              
              # 检查该 Tag 是否包含 .github/workflows/ 文件
              if git diff --quiet $TAG -- .github/workflows/ 2>/dev/null; then
                echo "同步安全的 Tag: $TAG"
                git fetch upstream tag "$TAG"
                git push origin "refs/tags/$TAG"
              else
                echo "跳过 Tag $TAG（包含 workflow 文件，无权限修改）"
              fi
            done
          fi

      # 步骤 6：同步 Release Assets（仅针对安全的 Tags）
      - name: Sync Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 遍历所有本地 Tags，只处理不包含 workflow 文件的 Tags
          for TAG in $(git tag -l | sort -V); do
            echo "检查 Tag: $TAG"
            
            # 跳过包含 workflow 文件的 Tags
            if ! git diff --quiet $TAG -- .github/workflows/ 2>/dev/null; then
              echo "跳过 Tag $TAG（包含 workflow 文件）"
              continue
            fi
            
            # 检查是否已存在 Release
            EXISTING_RELEASE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/$TAG" | jq -r '.id')
            
            if [ "$EXISTING_RELEASE" != "null" ]; then
              echo "Release 已存在: $TAG"
              continue
            fi

            # 检查上游是否有该 Tag 的 Release Assets
            UPSTREAM_URL="https://api.github.com/repos/MoonTechLab/Selene/releases/tags/$TAG"
            RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$UPSTREAM_URL")
            
            # 检查 API 响应是否有效
            if echo "$RESPONSE" | jq -e '.message == "Not Found"' >/dev/null; then
              echo "上游没有找到 Tag $TAG 的 Release"
              continue
            fi

            # 检查是否有 Assets
            if echo "$RESPONSE" | jq -e '.assets? | length > 0' >/dev/null; then
              echo "发现 Assets，开始下载: $TAG"
              mkdir -p "release_assets/$TAG"
              
              # 下载所有 Assets
              echo "$RESPONSE" | jq -r '.assets[].browser_download_url' | while read ASSET_URL; do
                if [ -n "$ASSET_URL" ]; then
                  echo "下载: $(basename "$ASSET_URL")"
                  curl -L -o "release_assets/$TAG/$(basename "$ASSET_URL")" "$ASSET_URL" || echo "下载失败，继续处理"
                fi
              done

              # 创建 Release
              echo "创建 Release: $TAG"
              gh release create "$TAG" \
                --title "$TAG (Synced from Upstream)" \
                --notes "Automatically synced from MoonTechLab/Selene" \
                "release_assets/$TAG/*" || echo "Release 创建失败或已存在"
            else
              echo "Tag $TAG 没有 Assets，跳过 Release 创建"
            fi
          done

      # 步骤 7：清理临时文件
      - name: Cleanup
        run: |
          rm -rf release_assets
          echo "同步完成！"
