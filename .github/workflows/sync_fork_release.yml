name: Auto Sync Fork and Releases 

on:
  schedule:
    - cron: '0 2 * * *'  # 每天 UTC 2:00（北京时间 10:00）
  workflow_dispatch:     # 支持手动触发

jobs:
  sync-fork-and-releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 步骤 1：检出你的 Fork 仓库
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 步骤 2：设置 Git 身份
      - name: Set up Git Identity
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # 步骤 3：添加上游仓库
      - name: Add Upstream Remote
        run: |
          git remote add upstream https://github.com/MoonTechLab/Selene.git || true
          git fetch upstream --tags -f

      # 步骤 4：同步安全的 Tags
      - name: Sync Safe Tags
        run: |
          # 获取上游所有 Tags
          UPSTREAM_TAGS=$(git ls-remote --tags upstream | awk -F/ '{print $3}' | sort -V)
          
          echo "上游 Tags:"
          echo "$UPSTREAM_TAGS"
          
          # 逐个检查并推送安全的 Tags
          for TAG in $UPSTREAM_TAGS; do
            # 检查该 Tag 是否包含 .github/workflows/ 文件
            if git diff --quiet $TAG -- .github/workflows/ 2>/dev/null; then
              echo "✅ 推送安全的 Tag: $TAG"
              git push origin "refs/tags/$TAG" 2>/dev/null || echo "ℹ️ Tag 可能已存在: $TAG"
            else
              echo "❌ 跳过 Tag $TAG（包含 workflow 文件）"
            fi
          done

      # 步骤 5：强制同步 Release Assets
      - name: Force Sync Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 获取所有本地 Tags
          LOCAL_TAGS=$(git tag -l | sort -V)
          
          echo "本地 Tags:"
          echo "$LOCAL_TAGS"
          
          for TAG in $LOCAL_TAGS; do
            echo "=== 强制处理 Tag: $TAG ==="
            
            # 检查上游 Release 信息
            UPSTREAM_URL="https://api.github.com/repos/MoonTechLab/Selene/releases/tags/$TAG"
            UPSTREAM_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$UPSTREAM_URL")
            
            # 检查上游是否有该 Release
            UPSTREAM_EXISTS=$(echo "$UPSTREAM_RESPONSE" | jq -r '.id' | grep -v null || echo "")
            
            if [ -z "$UPSTREAM_EXISTS" ]; then
              echo "❌ 上游没有 Tag $TAG 的 Release"
              continue
            fi

            # 检查上游是否有 Assets
            UPSTREAM_ASSETS_COUNT=$(echo "$UPSTREAM_RESPONSE" | jq -r '.assets | length')
            if [ "$UPSTREAM_ASSETS_COUNT" -eq 0 ]; then
              echo "ℹ️ 上游 Release 没有 Assets: $TAG"
              continue
            fi

            echo "✅ 发现上游 Assets ($UPSTREAM_ASSETS_COUNT 个): $TAG"
            
            # 强制删除本地已存在的 Release（如果有）
            echo "🗑️ 强制删除本地 Release: $TAG"
            gh release delete "$TAG" --yes 2>/dev/null && echo "✅ 删除成功" || echo "ℹ️ 无需删除（Release 不存在）"
            
            # 下载 Assets
            mkdir -p "release_assets/$TAG"
            echo "$UPSTREAM_RESPONSE" | jq -r '.assets[].browser_download_url' | while read ASSET_URL; do
              if [ -n "$ASSET_URL" ]; then
                FILENAME="release_assets/$TAG/$(basename "$ASSET_URL")"
                echo "⬇️ 下载: $(basename "$ASSET_URL")"
                curl -L -o "$FILENAME" "$ASSET_URL" && echo "✅ 下载成功" || echo "❌ 下载失败"
              fi
            done

            # 强制创建 Release
            if [ "$(ls -A release_assets/$TAG 2>/dev/null)" ]; then
              echo "🚀 强制创建 Release: $TAG"
              
              # 方法1：使用 gh release create
              gh release create "$TAG" \
                --title "$TAG (Synced from Upstream)" \
                --notes "Automatically synced from MoonTechLab/Selene" \
                "release_assets/$TAG/"* && echo "✅ Release 创建成功" || echo "❌ Release 创建失败"
                
              # 如果方法1失败，尝试方法2：使用 GitHub API
              if [ $? -ne 0 ]; then
                echo "🔄 尝试使用 API 创建 Release: $TAG"
                RELEASE_DATA=$(cat << EOF
                {
                  "tag_name": "$TAG",
                  "name": "$TAG (Synced from Upstream)",
                  "body": "Automatically synced from MoonTechLab/Selene",
                  "draft": false,
                  "prerelease": false
                }
EOF
                )
                # 创建 Release
                RELEASE_ID=$(curl -s -X POST \
                  -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" \
                  -d "$RELEASE_DATA" | jq -r '.id')
                  
                if [ "$RELEASE_ID" != "null" ]; then
                  echo "✅ API 创建 Release 成功，ID: $RELEASE_ID"
                  
                  # 上传 Assets
                  for ASSET_FILE in release_assets/$TAG/*; do
                    if [ -f "$ASSET_FILE" ]; then
                      ASSET_NAME=$(basename "$ASSET_FILE")
                      echo "⬆️ 上传 Asset: $ASSET_NAME"
                      curl -s -X POST \
                        -H "Authorization: token $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -H "Content-Type: application/octet-stream" \
                        "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID/assets?name=$ASSET_NAME" \
                        --data-binary @"$ASSET_FILE" && echo "✅ 上传成功" || echo "❌ 上传失败"
                    fi
                  done
                else
                  echo "❌ API 创建 Release 失败"
                fi
              fi
            else
              echo "❌ 没有可用的 Assets 文件"
            fi
            
            echo ""
          done

      # 步骤 6：清理和验证
      - name: Cleanup and Verify
        run: |
          rm -rf release_assets
          echo "=== 同步完成 ==="
          echo "✅ Tags 数量: $(git tag -l | wc -l)"
          echo "📊 请检查: https://github.com/$GITHUB_REPOSITORY/releases"
